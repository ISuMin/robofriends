{"version":3,"sources":["reducers.js","containers/ErrorBoundry/ErrorBoundry.js","components/SearchBar/SearchBar.js","components/Card/Card.js","components/CardList/CardList.js","components/Scroll/Scroll.js","containers/App/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["intialStateSearch","searchField","initialStateRobots","isPending","robots","error","ErrorBoundry","state","hasError","info","this","setState","props","children","Component","SearchBar","type","placeholder","onChange","searchChange","Card","className","src","id","alt","name","site","CardList","cardArray","map","robot","i","key","email","Scroll","style","overflowY","height","App","onRequestRobots","onSearchChange","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.826c8802.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants'\r\n\r\nconst intialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload} )\r\n      // return { ...state, searchField: action.payload }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const  requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true })\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false })\r\n    default:\r\n      return state;\r\n  }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class ErrorBoundry extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({hasError: true})\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <div>\r\n          <h1>Ooops,something went wrong.</h1>\r\n        </div>\r\n      )\r\n    } else {\r\n      return this.props.children\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport './SearchBar.css'\r\n\r\nconst SearchBar = (props) => {\r\n  return (\r\n    <div>\r\n      <input type='search' placeholder='search robots' onChange={props.searchChange}/>\r\n    </div>\r\n  )\r\n}\r\nexport default SearchBar;","import React from 'react'\r\nimport './Card.css';\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className='card-item'>\r\n      <img src={`https://robohash.org/${props.id}?set=set3`} alt='robot-face'/>\r\n      <h2>{props.name}</h2>\r\n      <p>{props.site}</p>\r\n    </div>\r\n  );\r\n}\r\nexport default Card;","import React from 'react'\r\nimport './CardList.css'\r\nimport Card from '../Card/Card'\r\n\r\nconst CardList = (props) => {\r\n  const { robots } = props;\r\n  const cardArray = robots.map((robot, i) => {\r\n    return <Card key={robot.id} id = {robot.id} name ={robot.name} site = {robot.email}/>\r\n  })\r\n  return (\r\n    <section className='card-container'>\r\n      {cardArray}\r\n    </section>\r\n  )\r\n}\r\nexport default CardList;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', height: '82vh' }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React, { Component, Fragment } from 'react'\nimport { connect } from 'react-redux';\nimport ErrorBoundry from '../ErrorBoundry/ErrorBoundry';\nimport SearchBar from '../../components/SearchBar/SearchBar'\nimport CardList from '../../components/CardList/CardList';\nimport Scroll from '../../components/Scroll/Scroll';\nimport { setSearchField, requestRobots } from '../../actions';\nimport './App.css';\n\nconst mapStateToProps = state => {\n  return { \n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return { \n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return isPending ? <h1>Loading</h1> : (\n      <Fragment>\n        <header className=\"app-header\">\n          <h1>Robo Friends</h1>\n          <SearchBar searchChange = {onSearchChange}/>\n        </header>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots = {filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </Fragment>\n    ) \n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () =>(dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then( response => response.json())\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\nimport { Provider } from 'react-redux'\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App/App';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render( <Provider store={store}><App /></Provider> , document.getElementById('root') );\n\nserviceWorker.unregister();"],"sourceRoot":""}